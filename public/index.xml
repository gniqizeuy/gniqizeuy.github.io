<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gniqizeuy blog</title>
    <link>https://gniqizeuy.github.io/</link>
    <description>Recent content on gniqizeuy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://gniqizeuy.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>windows command</title>
      <link>https://gniqizeuy.github.io/items/windows-cmd/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/windows-cmd/</guid>
      <description>Explorer open explorer
explorer .start . </description>
    </item>
    
    <item>
      <title>go plantuml</title>
      <link>https://gniqizeuy.github.io/items/go-plantuml/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/go-plantuml/</guid>
      <description>generate uml
install plantuml go get github.com/jfeliu007/goplantuml/parsergo get github.com/jfeliu007/goplantuml/cmd/goplantumlcd $GOPATH/src/github.com/jfeliu007/goplantumlgo install ./... Usage goplantuml [-recursive] path/to/gofiles path/to/gofiles2 &amp;gt; diagram_file_name.puml view in chrome install PlantUML Visualizer
should open Allow access to file address
view in vs code install Plantuml in Extensions
open puml file in code
use ALT + D to preview
use CTRL + SHIFT + P choose Export Current Diagram to export
add plantuml config like this</description>
    </item>
    
    <item>
      <title>mqtt</title>
      <link>https://gniqizeuy.github.io/items/mqtt/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/mqtt/</guid>
      <description>发布订阅与主题设计 MQTT 协议中过滤规则即 Topic
MQTT 的 Topic 有层级结构，并且支持通配符 + 和 #：
 + 是匹配单层的通配符。比如 news/+ 可以匹配 news/sports，news/+/basketball 可匹配到 news/sports/basketball。 # 是一到多层的通配符。比如 news/# 可以匹配 news、 news/sports、news/sports/basketball 以及 news/sports/basketball/x 等等。  MQTT 的主题是不要预先创建的，发布者发送消息到某个主题、或者订阅者订阅某个主题的时候，Broker 就会自动创建这个主题。
带宽最小化 MQTT 协议将协议本身占用的额外消耗最小化，消息头部最小只需要占用 2 个字节。
MQTT 的消息格式分三部分：
 固定长度头部，2 个字节，所有消息类型都有 可变长度头部，部分消息类型有 Payload, 部分消息类型有  MQTT 的主要消息类型有：
 CONNECT / CONNACK PUBLISH / PUBACK SUBSCRIBE / SUBACK UNSUBSCRIBE / UNSUBACK PINGREQ / PINGRESP DISCONNECT  其中 PINGREQ / PINGRESP 和 DISCONNECT 报文是不需要可变头部的，也没有 Payload，也就是说它们的报文大小仅仅消耗 2 个字节。</description>
    </item>
    
    <item>
      <title>certificate</title>
      <link>https://gniqizeuy.github.io/items/certificate/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/certificate/</guid>
      <description>digital certificate 小明在如下借条中签署了自己的姓名：
今借到小红人名币一万元整借款人：小明 通过此借条我们可以得知：
 签名者的身份为小明（通过笔记鉴定可以确保其他人不能模仿）手写签名，不可伪造性 签名者认可该文件内容（通过肉眼观察可确保文件完整不被篡改）  此时，如果文件换为电子版本，小明该如何在其上签名？并且确保签名者身份和认可的文件不可伪造 即使用数字签名算法
数字签名算法主要有 RSA DSA ECDSA 三种
其中的 RSA 数字签名算法包含了 RSA 加密算法与哈希算法
哈希算法也是一种加密算法，对称以及非对称加密算法为双向算法：即可加密也可解密。而哈希算法是一种单向（不可逆）加密算法，只能加密不能解密，通过哈希算法对目标信息生成一段特定长度的唯一哈希值，不可通过哈希值重新获得目标信息。
常用的哈希算法有 MD5 SHA-1 SHA-256 SHA-512
RSA 数字签名算法的具体运算过程如下：
 小明根据 RSA 加密算法生成公钥 私钥； 对文件进行哈希运算 得出文件哈希值 H ； 使用私钥根据 RSA 解密公式对文件哈希值进行签名运算 得出数字签名 S ；  至此小明完成了对文件的数字签名
公钥 文件 及数字签名发送到互联网上；如果小红要验证文件是否已被小明签名，使用公钥根据 RSA 加密公式对数字签名进行验证运算 得出文件哈希值 H （因为 RSA 加密算法是双向的 即可加密也可解密）
数字签名亦是如此 签名使用解密公式，验证使用加密公式。同时对文件进行哈希运算，得出文件哈希值 H ；将两个文件哈希值进行对比，如果两者相同，则证明签名成立，不同则签名不成立
如何确保文件不被篡改
如果文件被篡改，则文件的哈希值就会发生变化。两者就不相同，签名验证也就不能通过
如何确保文件是小明本人签署
因为数字签名只能由私钥拥有者生成，也就确保了签字这身份一定是私钥拥有者；但并不能确定私钥拥有者一定是小明。因为其他人自己也可生成一套公钥 私钥 并进行数字签名 冒充成小明签名；</description>
    </item>
    
    <item>
      <title>vault 的使用</title>
      <link>https://gniqizeuy.github.io/items/vault/</link>
      <pubDate>Thu, 19 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/vault/</guid>
      <description>安装 vault 与 jq sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo sudo yum -y install vault sudo yum install epel-release sudo yum install jq -y 初始化 Vault 下面的API请求可以对Vault进行初始化，两个参数的意思将master key分成几份以及还原，这里采用 1。
curl -X PUT -d &amp;#34;{\&amp;#34;secret_shares\&amp;#34;:1, \&amp;#34;secret_threshold\&amp;#34;:1}&amp;#34; http://127.0.0.1:8200/v1/sys/init | jq 返回结果如下：
{ &amp;#34;keys&amp;#34;: [ &amp;#34;5370c6eb7678cbf3e90d0f540ae38642126f5f568fe411287294164f567fb546&amp;#34; ], &amp;#34;keys_base64&amp;#34;: [ &amp;#34;U3DG63Z4y/PpDQ9UCuOGQhJvX1aP5BEocpQWT1Z/tUY=&amp;#34; ], &amp;#34;root_token&amp;#34;: &amp;#34;s.qGjCQRpveLtOodP20xcqq4X3&amp;#34; } 第一个是master key的public key，第二个是unseal key,最后一个是root token。unseal vault之后才能验证进行具体的操作。
curl -X PUT -d &amp;#39;{&amp;#34;key&amp;#34;: &amp;#34;U3DG63Z4y/PpDQ9UCuOGQhJvX1aP5BEocpQWT1Z/tUY=&amp;#34;}&amp;#39; http://127.0.0.1:8200/v1/sys/unseal | jq 结果如下：</description>
    </item>
    
    <item>
      <title>postgresql</title>
      <link>https://gniqizeuy.github.io/items/postgres/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/postgres/</guid>
      <description>处理和创建 JSON 数据 json和jsonb 操作符
   操作符 右操作数类型 返回类型 描述 例子 例子结果     -&amp;gt; int json or jsonb 获得 JSON 数组元素（索引从 0 开始，负整数从末尾开始计） &#39;[{&amp;quot;a&amp;quot;:&amp;quot;foo&amp;quot;},{&amp;quot;b&amp;quot;:&amp;quot;bar&amp;quot;},{&amp;quot;c&amp;quot;:&amp;quot;baz&amp;quot;}]&#39;::json-&amp;gt;2 {&amp;quot;c&amp;quot;:&amp;quot;baz&amp;quot;}   -&amp;gt; text json or jsonb 通过键获得 JSON 对象域 &#39;{&amp;quot;a&amp;quot;: {&amp;quot;b&amp;quot;:&amp;quot;foo&amp;quot;}}&#39;::json-&amp;gt;&#39;a&#39; {&amp;quot;b&amp;quot;:&amp;quot;foo&amp;quot;}   -&amp;gt;&amp;gt; int text 以text形式获得 JSON 数组元素 &#39;[1,2,3]&#39;::json-&amp;gt;&amp;gt;2 3   -&amp;gt;&amp;gt; text text 以text形式获得 JSON 对象域 &#39;{&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:2}&#39;::json-&amp;gt;&amp;gt;&#39;b&#39; 2   #&amp;gt; text[] json or jsonb 获取在指定路径的 JSON 对象 &#39;{&amp;quot;a&amp;quot;: {&amp;quot;b&amp;quot;:{&amp;quot;c&amp;quot;: &amp;quot;foo&amp;quot;}}}&#39;::json#&amp;gt;&#39;{a,b}&#39; {&amp;quot;c&amp;quot;: &amp;quot;foo&amp;quot;}   #&amp;gt;&amp;gt; text[] text 以text形式获取在指定路径的 JSON 对象 &#39;{&amp;quot;a&amp;quot;:[1,2,3],&amp;quot;b&amp;quot;:[4,5,6]}&#39;::json#&amp;gt;&amp;gt;&#39;{a,2}&#39; 3     注意 对json和jsonb类型，这些操作符都有其并行变体。</description>
    </item>
    
    <item>
      <title>nats</title>
      <link>https://gniqizeuy.github.io/items/nats/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/nats/</guid>
      <description>安装 nats winodws choco install nats-server 启动 nats
nats-server 监控 nats nats-server -m [http_port] -m 指定 http 端口，浏览器输入地址即可访问
安装 nats-top go get github.com/nats-io/nats-top 使用 nats-top 默认 8222 端口</description>
    </item>
    
    <item>
      <title>go error</title>
      <link>https://gniqizeuy.github.io/items/go-errror/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/go-errror/</guid>
      <description>error 接口 go中 error 只是一个接口类型，不包含返回错误消息的方法
type error interface { Error() string } errors package errors 包中 errors.go 源码如下
package errors // New returns an error that formats as the given text. // Each call to New returns a distinct error value even if the text is identical. func New(text string) error { return &amp;amp;errorString{text} } // errorString is a trivial implementation of error. type errorString struct { s string } func (e *errorString) Error() string { return e.</description>
    </item>
    
    <item>
      <title>docker image</title>
      <link>https://gniqizeuy.github.io/items/docker-image/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/docker-image/</guid>
      <description>镜像是 docker 容器的基石，容器是镜像的运行实例。
构建镜像 docker 提供两种创建镜像的方法：docker commit 命令和 Dockerfile 构建文件
docker commit docker commit 命令是创建镜像最直观的方法，其过程包括三个步骤：
 运行容器 修改容器 将容器保存为新的镜像  例: 在 ubuntu base 镜像中安装 vi 并保存为新镜像
# -it 以交互模式进入容器内部[root@ubuntu ~]# docker run -it ubunturoot@a42d1b27e5c2:/# apt-get install -y vim# 将随机分配的名字ecstatic_galileo 构建成 ubuntu-with-vi[root@ubuntu ~]# docker commit ecstatic_galileo ubuntu-with-viDocker 并不建议用户通过这种方式构建镜像：
 这是一种手工构建方式，容易出错，效率低且可靠性弱 用户并不知道镜像是如何构建出来的，里面是否有恶意程序，无法对镜像进行审核，存在安全隐患  使用 Dockerfile 构建镜像底层也是以 docker commit 一层层构建新镜像的
Dockerfile Dockerfile 是一个文本文件，记录了镜像构建的所有步骤
使用 Dockerfile 创建 ubuntu-with-vi</description>
    </item>
    
    <item>
      <title>go test</title>
      <link>https://gniqizeuy.github.io/items/go-test/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/go-test/</guid>
      <description>目前 go test 支持的测试类型有：
 单元测试 性能测试 实力测试  testing.common test.common 作为 testing.T 和 testing.B 的基础类型</description>
    </item>
    
    <item>
      <title>interprocess communication</title>
      <link>https://gniqizeuy.github.io/items/interprocess-communication/</link>
      <pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/interprocess-communication/</guid>
      <description>进程间通信 尽管今天的大多数RPC技术已经不再追求这个目标了，但不可否认，RPC出现的最初目 的，就是为了让计算机能够与调用本地方法一样去调用远程方法。所以，我们先来看一下调 用本地方法时，计算机是如何处理的。笔者通过以下这段Java风格的伪代码来定义几个稍后 要用到的概念：
 // Caller : 调用者，代码里的main()
// Callee ： 被调用者，代码里的println()
// Call Site ： 调用点，即发生方法调用的指令流位置
// Parameter ： 参数，由Caller传递给Callee的数据，即“hello world”
// Retval ： 返回值，由Callee传递给Caller的数据，如果方法能够正常结束，它是void，
如果方法异常完成，它是对应的异常
public static void main(String[] args) {
System.out.println(&amp;ldquo;hello world&amp;rdquo;);
}
 在完全不考虑编译器优化的前提下，程序运行至调用println()方法输出hello world这行 时，计算机（物理机或者虚拟机）要完成以下几项工作。
1）传递方法参数：将字符串hello world的引用地址压栈。 2）确定方法版本：根据println()方法的签名，确定其执行版本。这其实并不是一个简单 的过程，无论是编译时静态解析，还是运行时动态分派，都必须根据某些语言规范中明确定 义的原则，找到明确的Callee，“明确”是指唯一的一个Callee，或者有严格优先级的多个 Callee，譬如不同的重载版本。笔者曾在《深入理解Java虚拟机》的第8章介绍该过程，有兴 趣的读者可以参考，这里不再赘述。
3）执行被调方法：从栈中弹出Parameter的值或引用，并以此为输入，执行Callee内部的 逻辑。这里我们只关心方法是如何调用的，而不关心方法内部具体是如何执行的。 4）返回执行结果：将Callee的执行结果压栈，并将程序的指令流恢复到Call Site的下一 条指令，继续向下执行。
我们再来考虑如果println()方法不在当前进程的内存地址空间中会发生什么问题。不难 想到，这样会至少面临两个直接的障碍。首先，第一步和第四步所做的传递参数、传回结果 都依赖于栈内存，如果Caller与Callee分属不同的进程，就不会拥有相同的栈内存，此时将参 数在Caller进程的内存中压栈，对于Callee进程的执行毫无意义。其次，第二步的方法版本选 择依赖于语言规则，如果Caller与Callee不是同一种语言实现的程序，方法版本选择就将是一 项模糊的不可知行为。
为了简化讨论，我们暂时忽略第二个障碍，假设Caller与Callee是使用同一种语言实现 的，先来解决两个进程之间如何交换数据的问题，这件事情在计算机科学中被称为“进程间 通信”（Inter-Process Communication，IPC）。可以考虑的解决办法有以下几种。
·管道（Pipe）或者具名管道（Named Pipe）：管道类似于两个进程间的桥梁，可通过管 道在进程间传递少量的字符流或字节流。普通管道只用于有亲缘关系的进程（由一个进程启 动的另外一个进程）间的通信，具名管道摆脱了普通管道没有名字的限制，除具有管道的所 有功能外，它还允许无亲缘关系的进程间的通信。管道典型的应用就是命令行中的“|”操作 符，譬如：</description>
    </item>
    
    <item>
      <title>grpc 的通信模式</title>
      <link>https://gniqizeuy.github.io/items/communication/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/communication/</guid>
      <description>gRPC 应用程序有 4 种基础通信模式：一元 RPC、服务器端流 RPC、客户端流 RPC 以及双向流 RPC。</description>
    </item>
    
    <item>
      <title>protoc</title>
      <link>https://gniqizeuy.github.io/items/protoc/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/protoc/</guid>
      <description>protoc 编译 编译命令
# Syntax: protoc [OPTION] PROTO_FILES $ protoc --proto_path=IMPORT_PATH --go_out=OUT_DIR --go_opt=paths=source_relative path/to/file.proto  –proto_path或者-I ：指定 import 路径，可以指定多个参数，编译时按顺序查找，不指定时默认查找当前目录。 .proto 文件中也可以引入其他 .proto 文件，这里主要用于指定被引入文件的位置。 –go_out：golang编译支持，指定输出文件路径
其他语言则替换即可，比如 &amp;ndash;java_out 等等 –go_opt：指定参数，比如&amp;ndash;go_opt=paths=source_relative就是表明生成文件输出使用相对路径。 path/to/file.proto ：被编译的 .proto 文件放在最后面  </description>
    </item>
    
    <item>
      <title>npm</title>
      <link>https://gniqizeuy.github.io/items/npm/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/npm/</guid>
      <description>配置淘宝镜像 临时 npm --registry https://registry.npm.taobao.org install express 永久 npm config set registry https://registry.npm.taobao.org npm install 命令 npm 安装指定版本 -S 相当于 --save
npm install express@3.21.2 -S # 安装模块到项目目录下 npm install moduleName # -g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置。 npm install -g moduleName # -save 的意思是将模块安装到项目目录下，并在package文件的dependencies节点写入依赖。 # 运行npm install --production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。 npm install -save moduleName # -save-dev 的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖。 # 运行npm install --production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。 npm install -save-dev moduleName devDependencies 节点下的模块是开发时需要用的，比如项目中使用的 gulp ，压缩css、js的模块。 这些模块在我们的项目部署后是不需要的，所以我们可以使用 -save-dev 的形式安装。</description>
    </item>
    
    <item>
      <title>git proxy</title>
      <link>https://gniqizeuy.github.io/items/git-proxy/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/git-proxy/</guid>
      <description>HTTP 代理 HTTP 代理相对简单
HTTP 代理 git config --global http.proxy http://127.0.0.1:7890git config --global https.proxy http://127.0.0.1:7890 Socks5 代理 git config --global http.proxy socks5://127.0.0.1:7890git config --global https.proxy socks5://127.0.0.1:7890 注意这里的 socks5 仅仅是代理使用的协议，它依然是针对 http 设置的，所以仅对 http 协议的仓库有效。使用 git@xxx 这种 ssh 连接的不会使用代理。
也可以分域名设置代理：
git config --global http.https://github.com.proxy http://127.0.0.1:7890git config --global https.https://github.com.proxy https://127.0.0.1:7890 SSH 代理 SSH 代理需要在密钥目录 (~/.ssh) (Windows 下是 C:\Users{UserName}.ssh) 新建一个 config 文件，没有后缀名。
Linux 系统写入以下配置（未验证）：
# 需要 netcatProxyCommand nc -v -x 127.</description>
    </item>
    
    <item>
      <title>golang mail</title>
      <link>https://gniqizeuy.github.io/items/go-mail/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/go-mail/</guid>
      <description>package: net/mail
验证邮箱格式
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/mail&amp;#34; ) func main() { for _, email := range []string{ &amp;#34;good@exmaple.com&amp;#34;, &amp;#34;bad-example&amp;#34;, } { fmt.Printf(&amp;#34;%18s valid: %t\n&amp;#34;, email, valid(email)) } } func valid(email string) bool { _, err := mail.ParseAddress(email) return err == nil } </description>
    </item>
    
    <item>
      <title>centos8 install erpnext</title>
      <link>https://gniqizeuy.github.io/items/erpnext/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/erpnext/</guid>
      <description>系统源配置 dnf update -y yum install https://mirrors.aliyun.com/epel/epel-release-latest-8.noarch.rpm -y mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo sed -i &amp;#39;s|^#baseurl=https://download.fedoraproject.org/pub|baseurl=https://mirrors.aliyun.com|&amp;#39; /etc/yum.repos.d/epel* sed -i &amp;#39;s|^metalink|#metalink|&amp;#39; /etc/yum.repos.d/epel* sed -i &amp;#39;$a\fastestmirror=True&amp;#39; /etc/dnf/dnf.conf touch /etc/yum.repos.d/MariaDB.repo echo [mariadb] &amp;gt; /etc/yum.repos.d/MariaDB.repo echo name = MariaDB &amp;gt;&amp;gt; /etc/yum.repos.d/MariaDB.repo echo baseurl = https://mirrors.aliyun.com/mariadb/yum/10.5/centos8-amd64 &amp;gt;&amp;gt; /etc/yum.repos.d/MariaDB.repo echo module_hotfixes=1 &amp;gt;&amp;gt; /etc/yum.repos.d/MariaDB.repo echo gpgkey= https://mirrors.aliyun.com/mariadb/yum/RPM-GPG-KEY-MariaDB &amp;gt;&amp;gt; /etc/yum.repos.d/MariaDB.repo echo gpgcheck=1 &amp;gt;&amp;gt; /etc/yum.repos.d/MariaDB.repo dnf clean all dnf makecache 系统配置 dnf group install &amp;#34;Development Tools&amp;#34; -y sed -i &amp;#39;/SELINUX/s/enforcing/disabled/&amp;#39; /etc/selinux/config &amp;amp;&amp;amp; setenforce 0 firewall-cmd --zone=public --add-port=80/tcp firewall-cmd --zone=public --add-port=443/tcp firewall-cmd --zone=public --add-port=8000/tcp firewall-cmd --runtime-to-permanent useradd -m erp -G wheel sed -i &amp;#39;s/^#\s*\(%wheel\s\+ALL=(ALL)\s\+NOPASSWD:\s\+ALL\)/\1/&amp;#39; /etc/sudoers echo &amp;#34;vm.</description>
    </item>
    
    <item>
      <title>linux 查看端口</title>
      <link>https://gniqizeuy.github.io/items/port/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/port/</guid>
      <description>Centos8停用、启用、查看当前启用的端口 firewall-cmd --zone=public --add-port=5672/tcp --permanent # 开放5672端口
firewall-cmd --zone=public --remove-port=5672/tcp --permanent #关闭5672端口
firewall-cmd --reload # 配置立即生效
2、查看防火墙所有开放的端口
firewall-cmd --zone=public --list-ports
3.、关闭防火墙
如果要开放的端口太多，嫌麻烦，可以关闭防火墙，安全性自行评估
systemctl stop firewalld.service
4、查看防火墙状态
firewall-cmd --state
5、查看监听的端口
netstat -lnpt
PS:centos7默认没有 netstat 命令，需要安装 net-tools 工具，yum install -y net-tools
6、检查端口被哪个进程占用
netstat -lnpt |grep 5672
7、查看进程的详细信息
ps 6832
8、中止进程
kill -9 6832</description>
    </item>
    
    <item>
      <title>mutagen</title>
      <link>https://gniqizeuy.github.io/items/mutagen/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/mutagen/</guid>
      <description>mutagen.io
Installation Linux wget https://github.com/mutagen-io/mutagen/releases/download/v0.11.8/mutagen_linux_amd64_v0.11.8.tar.gz tar zxvf mutagen_linux_*.tar.gz -C /usr/local/bin mutagen daemon start Windows github issue: issue
download tar.gz: amd64.v0.11.8.tar.gz ; add to path
设置 MUTAGEN_SSH_PATH 变量指向 SSH 可执行文件的目录，暂不支持 Windows 的 SSH 客户端
采用 git for windows 注意 git 安装地址为 C: 默认地址
将 MUTAGEN_SSH_PATH 指向 GIT_INSTALL_ROOT\usr\bin
create session mutagen sync create
list session mutagen sync session
在同步的情况下，此输出将包括在端点之间传播更改时出现的任何冲突或问题。
mutagen forward list
如果没有为列表命令指定会话或标签选择器，它们将简单地打印所有会话。更详细的清单输出可以通过 -l/——long 标志获得。
monitor session mutagen sync monitor web-app
mutagen forward monitor web-app</description>
    </item>
    
    <item>
      <title>hugo</title>
      <link>https://gniqizeuy.github.io/items/hugo/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/hugo/</guid>
      <description>使用 yum 安装 hugo
新建 hugo.repo 文件, 访问 https://copr.fedorainfracloud.org/coprs/daftaupe/hugo/ 选择合适版本
vim /etc/yum.repos.d/hugo.repo 更新 yum
yum upgrade 安装 hugo
yum install hugo </description>
    </item>
    
    <item>
      <title>other</title>
      <link>https://gniqizeuy.github.io/items/other/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/other/</guid>
      <description>vue-cli3 控制台network存在 info 服务端：sockjs-node
客户端：sockjs-clien
如果你的项目没有用到 sockjs，vuecli3 运行 npm run serve 之后 network 里面一直一个接口：http://localhost:8080/sockjs-node/info?t=1462183700002
关闭info 1.找到/node_modules/sockjs-client/dist/sockjs.js
2.注释下面代码
try { // self.xhr.send(payload);  } catch (e) { self.emit(&amp;#39;finish&amp;#39;, 0, &amp;#39;&amp;#39;); self._cleanup(false); } </description>
    </item>
    
    <item>
      <title>vue.js</title>
      <link>https://gniqizeuy.github.io/items/vue/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/vue/</guid>
      <description>proxy vue 查看代理请求的真实地址 在文件 vue.config.js 文件里面找到 proxyTable 添加配置。
&amp;#39;/api&amp;#39;: { traget: url, changeOrigin: true loglevel: &amp;#39;debug&amp;#39; } vue-cli3 控制台network存在 info 服务端：sockjs-node
客户端：sockjs-clien
如果你的项目没有用到 sockjs，vuecli3 运行 npm run serve 之后 network 里面一直一个接口：http://localhost:8080/sockjs-node/info?t=1462183700002
关闭info 1.找到/node_modules/sockjs-client/dist/sockjs.js
2.注释下面代码
try { // self.xhr.send(payload);  } catch (e) { self.emit(&amp;#39;finish&amp;#39;, 0, &amp;#39;&amp;#39;); self._cleanup(false); } </description>
    </item>
    
    <item>
      <title>go time</title>
      <link>https://gniqizeuy.github.io/items/go-time/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/go-time/</guid>
      <description>+++
import ( &amp;#34;database/sql/driver&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) // Time 继承 time.Time 的所有方法，并重写 MarshalJSON 方法， // Time 进行 json 序列化时，会转为字符串 &amp;#34;2006-01-02 15:04:05&amp;#34; 的格式。 type Time struct { time.Time } // MarshalJSON 将 Time 类型转为 &amp;#34;2006-01-02&amp;#34; 格式。 func (t Time) MarshalJSON() (data []byte, err error) { layout := &amp;#34;2006-01-02&amp;#34; data = make([]byte, 0, len(layout)+2) data = append(data, &amp;#39;&amp;#34;&amp;#39;) data = t.AppendFormat(data, layout) data = append(data, &amp;#39;&amp;#34;&amp;#39;) return } func (t *Time) UnmarshalJSON(data []byte) error { // Ignore null, like in the main JSON package.</description>
    </item>
    
    <item>
      <title>go function</title>
      <link>https://gniqizeuy.github.io/items/go-function/</link>
      <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/go-function/</guid>
      <description>方法声明 与声明普通函数类似，只是在函数名字前面多一个参数，参数把这个方法绑定到这个参数对应的类型上
附加的参数称为方法的接收者
package geometry import &amp;#34;math&amp;#34; type Point struct{ X, Y float64 } // 普通函数 func Distance(p, q Point) float64 { return math.Hypot(q.X-p.X, q.Y-p,Y) } // Point 类型方法 func (p Point) Distance(q point) float64 { return math.Hypot(q.X-p.X, q.Y-p,Y) } go 中接收者不使用特殊名（this 或 self）；而是我们自己选择接收者名字。通常取类型名称的首字符
p := Point{1, 2} q := Point{4, 6} fmt.Println(Distance(p, q)) fmt.Println(p.Distance(q)) 上述两个 Distance 函数声明没有冲突，第一个是包级别的函数（称为 geometry.Distance）。第二个声明一个类型 Point 的方法（Point.Distance）
表达式 p.Distance 称作选择子（selector）因为它为接收者 p 选择合适的 Distance 方法。选择子也作用于选择结构类型中的字段值，由于方法与字段来自同一个命名空间，同名的字段与方法，编译器会报错。
go 中的方法可以绑定到任何类型上，同一个包下的任何类型都可以声明方法，只要它的类型既不是指针类型也不是接口类型</description>
    </item>
    
    <item>
      <title>go interface</title>
      <link>https://gniqizeuy.github.io/items/go-interface/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/go-interface/</guid>
      <description>+++
 接口类型是对其他类型行为的概括与抽象。使用接口写出更加灵活和通用的函数，这些函数不用绑定在一个特定的类型实现上。
 go 接口独特于隐式实现。对于具体类型，无须声明实现哪些接口，只要提供接口方法。这种设计让你无须改变已有类型的实现，就可为类型创建新的接口，对于不能修改包的类型，特别有用。
具体类型与接口类型
具体类型：数据及操作，通过其方法来提供额外的能力。是什么，能干什么
接口类型：一种抽象类型，仅包含方法。即能做什么。
fmt.Pintf和fmt.Sprintf前者把结果发送到标准输出（其实是一个文件），后者把结构以string类型返回。
格式化是两个函数中最复杂的部分，将格式化以接口的形式抽出。（其实两个函数都封装了第三个函数fmt.Fprintf）
package fmt func Fprintf(w io.Writer, format string, args ...interface{}) (int, error) func Printf(format string,args ...interface{}) (int, error) { return Fprintf(os.Stdout, format, args...) } func Sprintf(format string, args ...interface{}) string { var buf bytes.Buffer Fprintf(&amp;amp;buf, format, args...) return buf.String() } 类型断言 作用于接口上，写法类似于x.T()，x 指接口类型表达式，T 是一个类型（称为断言类型）。
类型断言检查作为操作数的动态类型是否满足指定的断言类型
类型断言检查一般有两种可能
断言类型 T 是具体类型
类型断言检查 x 的动态类型是否就是 T，检查成功，类型断言结果就是 x 的动态值，即 T 类型。
类型断言就是用来从它的操作数中把具体类型的值提取出来的操作。检查失败，则操作崩溃
var w io.</description>
    </item>
    
    <item>
      <title>docker command</title>
      <link>https://gniqizeuy.github.io/items/docker/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/docker/</guid>
      <description>Docker 子命令分类    子命令分类 子命令     Docker 环境信息 info、version   容器生命周期管理 Create、exec、kill、pause、restart、rm、run、start、stop、unpause   镜像仓库命令 login、logout、pull、push、search   镜像管理 build、images、import、load、rmi、save、tag、commit   容器运维操作 attach、export、inspect、port、ps、rename、stats、top、wait、cp、diff、update   容器资源管理 volume、network   系统日志信息 events、history、logs    docker ps 命令
docker ps 命令可以查看容器的相关信息，默认只显示只在运行的容器的信息，
可以查看到的信息包括
 CONTAINER ID NAMES IMAGE STATUS 容器启动后执行的 COMMAND 创建时间 CREATED 绑定的端口 PORTS  docker ps 命令最常用的功能就是查看容器的 CONTAINER ID，以便对特定容器进行操作
docker ps [OPTIONS] 常用的选项有 -a 和 -l。</description>
    </item>
    
    <item>
      <title>go goroutine channel</title>
      <link>https://gniqizeuy.github.io/items/go-goroutine-channel/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/go-goroutine-channel/</guid>
      <description>&lt;p&gt;Go 有两种并发编程的风格。goroutine 和 通道，以及共享内存多线程的传统模型&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go summary</title>
      <link>https://gniqizeuy.github.io/items/go-summary/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/go-summary/</guid>
      <description>&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;有关 go 的一些自我总结&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go composite data</title>
      <link>https://gniqizeuy.github.io/items/go-composite-data/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/go-composite-data/</guid>
      <description>&lt;h2 id=&#34;复合数据类型&#34;&gt;复合数据类型&lt;/h2&gt;
&lt;p&gt;复合数据类型是由基本数据类型以各种方式组合而构成的&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mysql tuning</title>
      <link>https://gniqizeuy.github.io/items/mysql-tuning/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/mysql-tuning/</guid>
      <description>&lt;h2 id=&#34;schema-与-数据类型优化&#34;&gt;Schema 与 数据类型优化&lt;/h2&gt;
&lt;p&gt;良好的&lt;strong&gt;逻辑设计&lt;/strong&gt;和&lt;strong&gt;物理设计&lt;/strong&gt;是高性能的基石，应该根据系统将要执行的&lt;strong&gt;查询语句&lt;/strong&gt;来设计 schema&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Security</title>
      <link>https://gniqizeuy.github.io/items/spring-security/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/spring-security/</guid>
      <description>任何 Spring Web 应用本质上只是一个 servlet
Security Filter 在 HTTP 请求到达 controller 之前过滤每一个传入的 HTTP 请求
过滤链
认识 Spring Security Spring Security 提供了声明式的安全访问控制解决方案（仅支持 Spring 的应用程序），对访问权限进行认证和授权，它基于 Spring Aop 和 Servlet 过滤器，提供了安全性方面的全面解决方案。
除常规的认证和授权外，它还提供了 ACls、LDAP、JAAS、CAS 等高级特性以满足复杂环境下的安全需求。
1. 核心概念  Principle：代表用户的对象 Principle（User），不仅指用户，还包括一切可以用于验证的设备。 Authority：代表用户的角色 Authority（Role），每个用户都应该有一种角色，如管理员或是会员。 Permission：代表授权，复杂的应用环境需要对角色的权限进行表述。  在 Spring Security 中，Authority 和 Permission 是两个完全独立的概念，两者并没有必然的联系，它们之间需要通过配置进行关联，可以是自己定义的各种关系。
2. 认证和授权 安全主要分为验证（authentication）和授权（authorization）两个部分
1）验证（authentication） 验证指的是，建立系统使用者信息（principal）的过程。使用者可以是一个用户、设备、和可以在应该程序种执行某些操作的其他系统。
用过户认证一般要求用户提供用户名和密码，系统通过校验用户名和密码的正确性来完成认证的通过或拒绝过程。
Spring Security 支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要验证、OPenID 和 LDAP 等。
Spring Security 进行验证的步骤如下：
 用户使用用户名和密码登录 过滤器（UsernamePasswordAuthenticationFilter）获取到用户名、密码、然后封装成 Authentication。 AuthenticationManager 认证 token（Authentication的实现类传递）。 AuthenticationManager 认证成功，返回一个封装了用户权限信息的 Authentication 对象，用户的上下文信息（角色列表等）。 Authentication 对象赋值给当前的 SecurityContext，建立这个用户的安全上下文（通过调用 SecurityContextHolder.</description>
    </item>
    
    <item>
      <title>Dark mode in a website with CSS</title>
      <link>https://gniqizeuy.github.io/items/dark-mode-website-css/</link>
      <pubDate>Wed, 09 Oct 2019 12:13:32 +0200</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/dark-mode-website-css/</guid>
      <description></description>
    </item>
    
    <item>
      <title>protobuf install</title>
      <link>https://gniqizeuy.github.io/items/protobuf-install/</link>
      <pubDate>Wed, 09 Oct 2019 12:13:32 +0200</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/protobuf-install/</guid>
      <description>新版本
google protobuf-3.6.1是现在最新版本，添加了新的特性，看说明
下载地址 https://github.com/protocolbuffers/protobuf/releases
我下载的是protobuf-all-3.6.1.tar.gz 包
新版本不需要执行autogen.sh脚本，直接./configure就行
tar zvxf protobuf-all-3.6.1.tar.gzcd protobuf-3.6.1./configure –prefix=/usr/local/sudo make # 要编译很久sudo make checksudo make install 编译安装protobuf的编译器protoc
wget https://github.com/google/protobuf/releases/download/v3.6.1/protobuf-all-3.6.1.tar.gztar zxvf protobuf-all-3.6.1.tar.gz./autogen.sh./configuremakemake install 错误处理
1、./autogen.sh执行报错./autogen.sh: line 38: autoreconf: command not found
安装autoconf和automakeyum -y install gcc automake autoconf libtool make安装g++:yum install gcc gcc-c++ </description>
    </item>
    
    <item>
      <title>centos update git</title>
      <link>https://gniqizeuy.github.io/items/centos-git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/centos-git/</guid>
      <description>系统自带 git 版本较低
卸载旧版本的Git
yum remove git -y 要升级Git，首先要安装一些依赖包； 安装基本的依赖包
yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel nss gcc perl-ExtUtils-MakeMaker -y 下载最新的git源码包：
https://mirrors.edge.kernel.org/pub/software/scm/git/ 解压、编译安装：
wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.xz tar xf git-2.9.5.tar.xz cd git-2.9.5 ./configure --prefix=/usr/local/git make &amp;amp;&amp;amp; make install 配置环境变量：
export PATH=$PATH:/usr/local/git/bin source /etc/profile 查看版本
git version git version 2.9.5  注意：但是如果缺少了nss包的话，在拉取以https开头的URL地址时就会有以下的几个异常信息；
 fatal: Unable to find remote helper for ‘https’fatal: unable to access ‘https://github.com/fatih/vim-go.git/‘: SSL connect error 可以执行安装:</description>
    </item>
    
    <item>
      <title>ssh</title>
      <link>https://gniqizeuy.github.io/items/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/ssh/</guid>
      <description>ssh 服务异常 ssh failed to start OpenSSH Server daemon
sshd -t 提示服务无法加载ssh_host_rsa_key,ssh_host_ecdsa_key 推测估计是权限问题
尝试以下方法
chmod 600 /etc/ssh/ssh_host_rsa_key chmod 600 /etc/ssh/ssh_host_ecdsa_ke service sshd star # 方法2：或者尝试操作如下 chown -R root.root /var/empty/sshd chmod 744 /var/empty/sshd service sshd restart </description>
    </item>
    
    <item>
      <title>vscode remote</title>
      <link>https://gniqizeuy.github.io/items/vs-code-remote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gniqizeuy.github.io/items/vs-code-remote/</guid>
      <description>安装 remote-ssh 插件
配置免密登录
打开git bash 执行 ssh-keygen 命令
生成文件在 ~/.ssh 下
id_rsa id_rsa.pub私钥 公钥 使用 ssh-copy-id 命令添加本机密钥
ssh-copy-id &amp;lt;user&amp;gt;@&amp;lt;host&amp;gt; 编辑 C:\User\xxx.ssh\config
Host centos # 服务器名称HostName xxx # 远程服务器的 IP 地址或域名User xxx # 用户名IdentityFile xxx # 私钥路径 </description>
    </item>
    
  </channel>
</rss>
